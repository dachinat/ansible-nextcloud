---
# task file for rbicker.nextcloud

- name: ensure epel-relase and webtatic yum repos are installed
  yum:
    name: '{{ item }}'
    state: present
  with_items:
    - epel-release
    - https://mirror.webtatic.com/yum/el7/webtatic-release.rpm

# dachinat fork
- name: Add official MariaDB repository
  yum_repository:
    name: MariaDB
    description: Official MariaDB repository
    baseurl: http://yum.mariadb.org/10.2/centos7-amd64
    gpgkey: https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
    gpgcheck: yes
  tags: mariadb

- name: ensure required packages are installed
  yum:
    name: '{{ item }}'
  with_items:
    - policycoreutils-python
    - lbzip2-utils
    - nginx
    - openssl
    - MariaDB-server # dachinat fork
    - MariaDB-client # dachinat fork
    - MySQL-python
    - redis
    - php71w-fpm
    - php71w-opcache
    - php71w-common # ctype, iconv, json, libxml, simplexml, zip, zlib, curl, fileinfo, bz2, openssl, ftp, exif, gmp
    - php71w-xml
    - php71w-gd 
    - php71w-xml # dom, xmlreader, xmlwriter
    - php71w-mbstring 
    - php71w-intl # intl
    - php71w-mcrypt
    - php71w-mysql
    - php71w-ldap
    - php71w-imap
    - php71w-pecl-apcu 
    - php71w-pecl-redis
    - php71w-pecl-imagick
    - php71w-process # posix
    - libreoffice

- name: ensure mysql binary logging is disabled
  lineinfile:
    path: /etc/my.cnf.d/server.cnf
    state: absent
    regexp: '^log-bin$' 
  notify:
    - restart mariadb
  when: mysql_disable_binary_logging # dachinat fork

# dachinat fork Sets (sets transaction level)
- name: ensure transaction level is set
  ini_file:
    path: /etc/my.cnf.d/server.cnf
    section: mysqld
    option: transaction-isolation
    value: "{{ mysql_transaction_level }}"
  notify:
    - restart mariadb
  when: mysql_transaction_level != ""

# dachinat fork (unsets transaction level)
- name: remove transaction level if set so
  ini_file:
    path: /etc/my.cnf.d/server.cnf
    section: mysqld
    option: transaction-isolation
    value: "{{ mysql_transaction_level }}"
    state: absent
  notify:
    - restart mariadb
  when: mysql_transaction_level == ""

- name: ensure mariadb-server is enabled and started
  service:
    name: mariadb
    state: started
    enabled: yes

- name: ensure the mariadb root password is set
  mysql_user:
    login_user: root
    name: root
    password: '{{ mysql_root_pw }}'

- name: ensure /root/.my.cnf is present
  template:
    src: my.cnf.j2
    dest: /root/.my.cnf
    owner: root
    group: root
    mode: '0600'

- name: ensure anonymous mysql user is absent
  mysql_user:
    name: ''
    login_user: root
    host_all: yes
    state: absent

- name: ensure mysql test database is absent
  mysql_db:
    name: test
    login_user: root
    state: absent

- name: ensure nextcloud database {{ nextcloud_mysql_db }} exists
  mysql_db:
    name: '{{ nextcloud_mysql_db }}'
    login_user: root
    state: present

- name: ensure database user {{ nextcloud_mysql_user }} exists and has all privileges  on {{ nextcloud_mysql_db }}
  mysql_user:
    name: '{{ nextcloud_mysql_user }}'
    password: '{{ nextcloud_mysql_pw }}'
    login_user: root
    priv: '{{ nextcloud_mysql_db }}.*:ALL,GRANT'
    state: present

- name: ensure php options are set
  lineinfile:
    path: /etc/php.ini
    regexp: '^{{ item.option }}'
    line: '{{ item.option }} = {{ item.value }}'    
  with_items:
    - { option: 'expose_php', value: 'Off' }
    #- { option: 'upload_max_filesize', value: '{{ nextcloud_max_upload_size }}' }
    #- { option: 'post_max_size', value: '{{ nextcloud_max_upload_size }}' }
    - { option: 'max_input_time', value: '{{ nextcloud_max_upload_time }}' }
    - { option: 'max_execution_time', value: '{{ nextcloud_max_upload_time }}' }
  notify:
    - reload php-fpm
    - reload nginx
    
- name: ensure pdo_mysql.ini config is present
  copy:
    src: pdo_mysql.ini
    dest: /etc/php.d/pdo_mysql.ini

#- name: ensure redis.conf is present
#  copy:
#    src: redis.conf
#    dest: /etc/redis.conf
#  notify:
#    - restart redis

- name: ensure directory for php sessions exists and has nginx as owner
  file:
    path: /var/lib/php/session
    owner: nginx
    group: nginx
    state: directory

- name: enusre /etc/nginx/nginx.conf is present
  copy:
    src: nginx.conf
    dest: /etc/nginx/nginx.conf
  notify:
    - reload nginx

- name: ensure default site nginx config is absent
  file:
    path: /etc/nginx/conf.d/default.conf
    state: absent

- name: ensure nextcloud.conf nginx config is present
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/conf.d/nextcloud.conf
  notify: 
    - reload nginx

- name: ensure ssl key and cert are present
  command: 'openssl req -new -nodes -x509 -subj {{ nextcloud_ssl_subject }} -days 3650 -keyout {{ nextcloud_ssl_key }} -out {{nextcloud_ssl_cert }} -extensions v3_ca creates={{ nextcloud_ssl_cert }}'
  notify: 
    - reload nginx
  when: (nextcloud_use_https and nextcloud_ssl_autogen)

- name: ensure php-fpm www.conf is present
  copy:
    src: www.conf
    dest: /etc/php-fpm.d/www.conf
  notify: reload php-fpm

- name: ensure opcache settings are correct
  lineinfile:
    path: /etc/php.d/opcache.ini
    regexp: '^{{ item.name }}='
    line: '{{ item.name }}={{ item.value }}'
  with_items:
    - { name: opcache.enable, value: 1 }
    - { name: opcache.enable_cli, value: 1 }
    - { name: opcache.interned_strings_buffer, value: 8 }
    - { name: opcache.max_accelerated_files, value: 10000 }
    - { name: opcache.memory_consumption, value: 128 }
    - { name: opcache.save_comments, value: 1 }
    - { name: opcache.revalidate_freq, value: 1 }
  notify: restart php-fpm

- name: ensure nginx, php-fpm and redis are enabled and running
  service:
    name: '{{ item }}'
    state: started
    enabled: yes
  with_items:
    - php-fpm
    - nginx
    - redis

# dachinat fork (enables emoji (UTF8 4-byte) support)
- name: configure mysql config for using emoji
  ini_file:
    dest: /etc/my.cnf.d/server.cnf
    section: mysqld
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { option: innodb_large_prefix, value: "true" }
    - { option: innodb_file_format, value: "barracuda "}
    - { option: innodb_file_per_table, value: "1" }
  notify:
    - restart mariadb
  when: mysql_use_emoji

- name: set collation for emoji
  command: "mysql --user=root --password={{ mysql_root_pw }} --execute=\"ALTER DATABASE {{ nextcloud_mysql_db }} CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\""
  check_mode: no
  changed_when: False
  when: mysql_use_emoji
# - END dachinat fork

# dachinat fork (replication settings)
- name: configure mysql for replication
  ini_file:
    dest: /etc/my.cnf.d/server.cnf
    section: mysqld
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { option: log-bin, value: "" }
    - { option: server_id, value: "1 "}
    - { option: replicate-do-db, value: "{{ nextcloud_mysql_db }}" }
    - { option: bind-address, value: "{{ inventory_hostname }}" }
  notify:
    - restart mariadb
  when: mysql_replication

#- name: ensure working dir is present
#  file:
#    path: '{{ nextcloud_working_dir }}'
#    state: directory

- name: ensure alias for the occ command exists in /root/.bashrc
  lineinfile:
    name: /root/.bashrc
    line: "alias occ='sudo -u nginx {{ nextcloud_web_root }}/occ'"

- name: ensure {{ nextcloud_web_root }} is present
  file:
    name: '{{ nextcloud_web_root }}'
    state: directory
  register: new_installation

- include: 'installation.yml'
  when: new_installation.changed

# dachinat fork (set skeletondirectory to empty value)
- name: performance tuning - js and css asset management
  command: 'php {{ nextcloud_web_root }}/occ config:system:set skeletondirectory --value ""'
  become: true
  become_user: nginx

# dachinat fork (updates smtp settings in config.php)
- name: configure smtp settings for nextcloud
  command: "{{item}}"
  with_items:
    - 'php {{ nextcloud_web_root }}/occ config:system:set mail_smtpmode --value="{{ nextcloud_mail_smtpmode }}"'
    - 'php {{ nextcloud_web_root }}/occ config:system:set mail_smtpauthtype --value="{{ nextcloud_mail_smtpauthtype }}"'
    - 'php {{ nextcloud_web_root }}/occ config:system:set mail_from_address --value="{{ nextcloud_mail_from_address }}"'
    - 'php {{ nextcloud_web_root }}/occ config:system:set mail_domain --value="{{ nextcloud_mail_domain }}"'
    - 'php {{ nextcloud_web_root }}/occ config:system:set mail_smtphost --value="{{ nextcloud_mail_smtphost  }}"'
    - 'php {{ nextcloud_web_root }}/occ config:system:set mail_smtpport --value="{{ nextcloud_mail_smtpport }}"'
    - 'php {{ nextcloud_web_root }}/occ config:system:set mail_smtpauth --value="{{ nextcloud_mail_smtpauth }}"'
    - 'php {{ nextcloud_web_root }}/occ config:system:set mail_smtpname --value="{{ nextcloud_mail_smtpname }}"'
    - 'php {{ nextcloud_web_root }}/occ config:system:set mail_smtppassword --value="{{ nextcloud_mail_smtppassword }}"'
    - 'php {{ nextcloud_web_root }}/occ config:system:set mail_smtpsecure --value="{{ nextcloud_mail_smtpsecure }}"'
  become: true
  become_user: nginx
  when: nextcloud_mail_update_cfg

# dachinat fork (set storage directory)
- name: set data directory in nextcloud config
  command: 'php {{ nextcloud_web_root }}/occ config:system:set datadirectory --value="{{ nextcloud_data_root }}"'
  become: true
  become_user: nginx

# dachinat fork (enables emoji (UTF8 4-byte) support)
- name: set the mysql.utf8mb4 config to true in your config.php
  command: 'php {{ nextcloud_web_root }}/occ config:system:set mysql.utf8mb4 --type boolean --value="true"'
  become: true
  become_user: nginx
  when: mysql_use_emoji

- name: convert all existing tables to the new collation by running the repair step
  command: 'php {{ nextcloud_web_root }}/occ maintenance:repair'
  become: true
  become_user: nginx
  when: mysql_use_emoji
# - END dachinat fork

- name: ensure .user.ini config is present
  template:
    src: user.ini.j2
    dest: '{{ nextcloud_web_root }}/.user.ini'
  notify:
    - reload nginx
    - reload php-fpm

# dachinat fork (uses declared variable as an interval)
- name: performance tuning - ensure the nextcloud cronjob exists and runs every min set
  cron:               
    name: nextcloud           
    minute: "{{ nextcloud_cron_interval }}"
    user: nginx               
    job: 'php -f /var/www/nextcloud/cron.php'

- include: 'permissions.yml'
